generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  GENERAL
  CLOSED
  BOD
  DINNER
  JOINT
  SOFT
  VISIT
}

enum MemberType {
  SINGLE
  FIXED
}

enum PricingMode {
  DEFAULT
  MANUAL_PER_REG
}

enum PaymentStatus {
  UNPAID
  PAID
  MONTHLY_BILL
}

enum RegRole {
  MEMBER
  GUEST
  SPEAKER
}

enum BillingType {
  NONE
  SINGLE_220
  FIXED_MONTHLY
  MANUAL
}

enum FinanceTxnType {
  INCOME
  EXPENSE
}

enum Role {
  admin
  event_manager
  menu_manager
  finance_manager
  checkin_manager
}

enum PaymentMethod {
  TRANSFER
  LINEPAY
}

enum PaymentPreference {
  BANK_ACCOUNT
  INVITER
}

enum RegistrationStatus {
  REGISTERED
  LEAVE
}

enum CardCategory {
  FINANCE         // 金融租賃（銀行、租賃、等）
  DEVELOPMENT     // 開發買賣（仲介、土開、等）
  DESIGN          // 規畫設計（建築師、設計師、跑照、等）
  CONSTRUCTION    // 整地建築（營造發、鋼筋、板模、等）
  MATERIALS       // 建材裝修（木工、水電、油漆、等）
  MANAGEMENT      // 管理專業（旅宿管理、包租代管、律師等）
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  nickname      String?
  googleId      String?  @unique
  phone         String?  @unique
  passwordHash  String?
  isActive      Boolean  @default(true)
  roles         Role[]
  memberProfile MemberProfile?
  registrations Registration[]
  invoices      FinanceInvoice[]
  monthlyPayments MemberMonthlyPayment[]
  cards         BusinessCard[]
  createdInvites InviteToken[]
  createdAt     DateTime @default(now())
}

model InviteToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdBy String
  creator   User     @relation(fields: [createdBy], references: [id])
  usedCount Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model MemberProfile {
  userId     String @id
  user       User   @relation(fields: [userId], references: [id])
  memberType MemberType
  active     Boolean @default(true)

  // 基本資料
  birthday        DateTime?
  dietPreference  String?   // 'meat' | 'veg'
  bio             String?

  // 工作資訊
  occupation       String?
  companyName      String?
  companyWebsite   String?
  workLocation     String?
  workDescription  String?
  portfolioPhotos  Json?
  businessCards    Json?
}

model MemberInvite {
  id         String   @id @default(cuid())
  email      String   @unique
  roleHints  Role[]
  memberType MemberType?
  token      String   @unique
  expiresAt  DateTime
  acceptedBy String?
  createdAt  DateTime @default(now())
}

model Event {
  id                String     @id @default(cuid())
  type              EventType
  title             String
  startAt           DateTime
  endAt             DateTime
  location          String?
  agenda            String?
  content           String?
  cutoffAt          DateTime?
  announcementTitle String?
  allowSpeakers     Boolean
  allowGuests       Boolean
  speakerQuota      Int?
  pricingMode       PricingMode @default(DEFAULT)

  guestPriceCents     Int?
  bodMemberPriceCents Int?
  bodGuestPriceCents  Int?
  defaultPriceCents   Int?



  registrations     Registration[]
  speakerBookings   SpeakerBooking[]
  guestInvites      GuestInvite[]
  financeLineItems  FinanceLineItem[]
  transactions      FinanceTransaction[]
  eventMenu         EventMenu?


  createdAt         DateTime @default(now())
}

model EventMenu {
  id           String   @id @default(cuid())
  eventId      String   @unique
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  hasMealService Boolean @default(false) // 是否提供餐點服務
  allowMealChoice Boolean @default(true) // 是否允許選擇餐點

  // 餐點選項
  mealCodeA    String?  // A餐點名稱
  mealCodeB    String?  // B餐點名稱
  mealCodeC    String?  // C餐點名稱 (素食)

  // 牛豬肉標記
  mealAHasBeef Boolean  @default(false)
  mealAHasPork Boolean  @default(false)
  mealBHasBeef Boolean  @default(false)
  mealBHasPork Boolean  @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SpeakerBooking {
  id               String         @id @default(cuid())
  eventId          String
  event            Event          @relation(fields: [eventId], references: [id])
  name             String
  phone            String
  editPasswordHash String
  diet             String         // 'veg'|'meat'
  noBeef           Boolean        @default(false)
  noPork           Boolean        @default(false)
  mealCode         String?
  pptUrl           String?
  paymentMethod    String?
  companyName      String?
  industry         String?
  bniChapter       String?
  invitedBy        String?
  checkedInAt      DateTime?      // 簽到時間
  paymentStatus    PaymentStatus  @default(UNPAID) // 繳費狀態
  createdAt        DateTime       @default(now())

  @@unique([eventId, phone])
}

model GuestInvite {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  token      String   @unique
  invitedBy  String?
  maxUses    Int?
  usedCount  Int      @default(0)
  expiresAt  DateTime?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model Registration {
  id            String   @id @default(cuid())
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id])
  role          RegRole
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])

  name          String?
  phone         String?
  editPasswordHash String? // 來賓編輯密碼（手機號碼 hash）
  companyName   String?
  industry      String?
  bniChapter    String?
  invitedBy     String?

  diet          String?
  noBeef        Boolean  @default(false)
  noPork        Boolean  @default(false)
  mealCode      String?

  checkedInAt   DateTime?
  billingType   BillingType @default(NONE)
  priceCents    Int?
  paymentStatus PaymentStatus @default(UNPAID)
  paymentMethod PaymentMethod?
  paymentPreference PaymentPreference?
  paymentNote   String?

  status        RegistrationStatus @default(REGISTERED)
  createdAt     DateTime @default(now())

  @@unique([eventId, phone])
}



model FinanceInvoice {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  month     String   // 'YYYY-MM'
  type      String   // 'fixed' | 'single'
  count     Int
  amount    Int      // cents
  status    String   // 'pending'|'paid'
  paidTxnId String?
  lines     FinanceLineItem[]
  createdAt DateTime @default(now())

  @@unique([userId, month, type])
}

model FinanceLineItem {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   FinanceInvoice @relation(fields: [invoiceId], references: [id])
  eventId   String
  event     Event?   @relation(fields: [eventId], references: [id])
  price     Int
  note      String?
}

model FinanceCategory {
  id       String        @id @default(cuid())
  name     String
  type     FinanceTxnType
  system   Boolean       @default(false)
  txns     FinanceTransaction[]
}

model FinanceTransaction {
  id            String         @id @default(cuid())
  date          DateTime
  type          FinanceTxnType
  categoryId    String?
  category      FinanceCategory? @relation(fields: [categoryId], references: [id])
  eventId       String?
  event         Event?         @relation(fields: [eventId], references: [id])
  amountCents   Int
  counterparty  String?
  note          String?
  paymentMethod PaymentMethod?
  createdBy     String?
  monthlyPaymentId String?
  monthlyPayment   MemberMonthlyPayment? @relation(fields: [monthlyPaymentId], references: [id])
  createdAt     DateTime @default(now())
}

model MemberMonthlyPayment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  month     String   // 'YYYY-MM'
  isPaid    Boolean  @default(false)
  amount    Int?     // 應繳金額(分)
  paidAt    DateTime?
  transactions FinanceTransaction[]
  createdAt DateTime @default(now())
  
  @@unique([userId, month])
}

model OrgSettings {
  id          String @id @default("singleton")
  bankInfo    String
  linePayInfo String?
  invitationCardUrl String?  // 預設邀請卡（向後相容）
  invitationCardGeneral String?  // 簡報組聚/聯合組聚/封閉會議
  invitationCardDinner String?   // 餐敘
  invitationCardSoft String?     // 軟性活動
  invitationCardBod String?      // BOD
  invitationCardVisit String?    // 職業參訪
  invitationCardSpeaker String?  // 講師預約
  invitationMessageGeneral String? @default("磐石砌好厝誠摯地邀請您一同來參與") // 簡報組聚/聯合組聚/封閉會議訊息
  invitationMessageDinner String? @default("磐石砌好厝誠摯地邀請您一同來參與")  // 餐敘訊息
  invitationMessageSoft String? @default("磐石砌好厝誠摯地邀請您一同來參與")    // 軟性活動訊息
  invitationMessageBod String? @default("磐石砌好厝誠摯地邀請您一同來參與")     // BOD訊息
  invitationMessageVisit String? @default("磐石砌好厝誠摯地邀請您一同來參與")   // 職業參訪訊息
  invitationMessageSpeaker String? @default("磐石砌好厝誠摯地邀請您一同來參與") // 講師預約訊息
  mobileGalleryImages String[] @default([])   // 手機版展示圖片
  desktopGalleryImages String[] @default([])  // 電腦版展示圖片
  // 名片子分類動態清單
  cardSubFinance     String[] @default([])
  cardSubDevelopment String[] @default([])
  cardSubDesign      String[] @default([])
  cardSubConstruction String[] @default([])
  cardSubMaterials   String[] @default([])
  cardSubManagement  String[] @default([])
} 

model BusinessCard {
  id        String        @id @default(cuid())
  ownerId   String
  owner     User          @relation(fields: [ownerId], references: [id])
  name      String
  company   String?
  title     String?
  email     String?
  phone     String?
  address   String?
  website   String?
  notes     String?
  imageUrl  String?
  category  CardCategory
  subcategories String[]   @default([])
  createdAt DateTime      @default(now())
  deletedAt DateTime?

  @@index([ownerId, category])
  @@index([name])
  @@index([phone])
}